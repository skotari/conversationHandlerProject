The aim of this project is to implement a conversation handler for Web services. Each Web service provides several operations (a minimum of 2 operations) from the set of operations 0P1, OP2, OP3, OP4, OP5, OP6, OP7, OP8. For simplicity, we assume that the invocation of an operation OPi (i=1,...,8) returns the message “Thank you for invoking the operation OPi”. The operations of a Web service should be invoked according to coordination protocol specified in WSCL language

Each Web service is registered in a database (to model the UDDI) with two attribtes (TModels): the first tModel points to the WSDL description of the service and the second tModel point to the WSCL specification of the service. Since we are not using a working UDDI, you can store the URL for the WSDL and directory path for the WSCL files in your database. Users invoke the Web services through a portal. The portal displays the list of Web services that are available. Once the user selects the Web service, the portal displays the list of operations offered by the service. This is done by parsing the WSDL document of the service (obtained through UDDI). Whenever the user decides to invoke a given operation of a selected service, the portal calls a conversation handler to check whether the invocation complies with the WSCL specification of the service. If there is compliance, the portal invokes the operation and displays the results. Otherwise, an error message is displayed to the user explaining the reasons for rejecting the invocation (and providing assistance to the user about the operation(s) she/he is allowed to invoke at this time).

Operation invocation is done by constructing a SOAP message through the code, and calling the chosen Web service / associated operation . The conversation handler should handle the case of several clients interacting with the same service at the same time. It should also handle the situation where several clients are interacting with several services at the same time.